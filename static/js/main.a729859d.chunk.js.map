{"version":3,"sources":["assets/spinner.svg","utils/convertToNumber.ts","utils/fetchData.ts","utils/formatCurrency.ts","hooks/types.ts","hooks/reducer.ts","utils/transformProducts.ts","utils/transformCategories.ts","api/index.ts","constants/index.ts","hooks/api.ts","utils/getRandomIntegerRange.ts","store/initialState.ts","store/context.ts","hooks/actions.ts","hooks/selectors.ts","components/ui/Button/index.tsx","components/ui/Card/index.tsx","components/ui/InputNumber/index.tsx","components/ui/Loader/index.tsx","components/ui/Table/index.tsx","components/content/BasketTable/index.tsx","components/content/CategoryTable/index.tsx","components/controls/InputNumberQuantity/index.tsx","containers/Basket/index.tsx","containers/Categories/index.tsx","pages/CatalogPage/index.tsx","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","convertToNumber","_number","toFixed","fetchData","fetchFunction","dispatch","asyncActionsTypes","isSilent","requestAction","successAction","failAction","type","a","async","result","payload","data","fetchResult","formatCurrency","replace","String","fromCharCode","PRODUCTS_GET","PRODUCTS_GET__SUCCESS","PRODUCTS_GET__FAIL","CATEGORIES_GET","CATEGORIES_GET__SUCCESS","CATEGORIES_GET__FAIL","EXCHANGE_RATES_GET","BASKET_PRODUCT_ADD","BASKET_PRODUCT_REMOVE","QUANTITY_SET","typedCategories","reducer","state","action","categoriesPayload","categories","fetched","transformedCategories","Object","keys","map","categoryId","categoryIdToNumber","Number","id","name","G","products","B","category","parseInt","transformedProducts","Value","Goods","product","T","N","currency","C","available","P","quantity","exchangeRates","currentProduct","basketCopiedToAdd","copy","basket","indexToAdd","findIndex","item","isIndexFounded","totalAddedProducts","push","basketCopiedToRemove","indexToRemove","splice","newQuantity","basketCopiedToQuantitySet","indexToQuantitySet","productToQuantitySet","Api","getProducts","axios","get","process","getCategories","BASE_CURRENCY","MIN_RUB_EX_RATE","MAX_RUB_EX_RATE","FETCH_DELAY","useAPI","useEffect","types","length","min","max","rateRub","Math","floor","random","isIncreased","rates","RUB","USD","base","interval","setInterval","clearInterval","initialState","StateContext","createContext","useDispatch","useContext","useRemoveProductToBasket","useStoreSelector","stateSelector","useCategoriesList","useExchangeRatesList","useBasketProductsList","Button","props","disabled","isBlock","styleType","className","children","restProps","baseClassName","cx","displayName","Card","title","isCollapsible","isCollapsed","useState","isStateCollapsed","setCollapsed","_collapsible","_collapsed","onClick","InputNumber","value","onChange","onBlur","valueState","setValue","e","newValue","target","Loader","src","spinnerSvg","alt","Table","columns","dataSource","emptyText","total","column","key","index","BasketTable","basketProducts","setQuantity","removeProductToBasket","productCurrencyRub","appropriateCategory","find","appropriateCategoryName","addon","warningMessage","price","actions","totalAmount","reduce","b","dataIndex","CategoryTable","productsList","addProductToBasket","filter","includes","productItemInBasket","isDisabledDeleteButton","isDisabledAddButton","productAvailableCount","InputNumberQuantity","inputClassName","_increased","_decreased","Basket","selectors","Categories","isFetched","categoriesList","CatalogPage","App","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a729859d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.00e1caa6.svg\";","export default function convertToNumber(_number: number): number {\n    return +(_number).toFixed(2);\n}\n","import { Dispatch } from 'react';\n\n\nexport default function fetchData(\n  fetchFunction: () => IRequestPromise,\n  dispatch: Dispatch<IAction>,\n  asyncActionsTypes: any[],\n  isSilent?: boolean,\n): IRequestPromise {\n  const [requestAction, successAction, failAction] = asyncActionsTypes;\n  if (!isSilent) {\n    dispatch({ type: requestAction });\n  }\n\n  const fetchResult = async() => {\n    try {\n      const result = await fetchFunction();\n      dispatch({ type: successAction, payload: result.data });\n\n      return result.data;\n    } catch (error) {\n      dispatch({ type: failAction, payload: error });\n\n      throw error;\n    }\n  };\n\n  return fetchResult();\n}\n","export default function formatCurrency(_number: number): string {\n    return _number.toFixed(2)\n      .replace('.', ',')\n      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + String.fromCharCode(160));\n}\n","export const PRODUCTS_GET = 'PRODUCTS_GET';\nexport const PRODUCTS_GET__SUCCESS = 'PRODUCTS_GET__SUCCESS';\nexport const PRODUCTS_GET__FAIL = 'PRODUCTS_GET__FAIL';\n\nexport const CATEGORIES_GET = 'CATEGORIES_GET';\nexport const CATEGORIES_GET__SUCCESS = 'CATEGORIES_GET__SUCCESS';\nexport const CATEGORIES_GET__FAIL = 'CATEGORIES_GET__FAIL';\n\nexport const EXCHANGE_RATES_GET = 'EXCHANGE_RATES_GET';\n\nexport const BASKET_PRODUCT_ADD = 'BASKET_PRODUCT_ADD';\nexport const BASKET_PRODUCT_REMOVE = 'BASKET_PRODUCT_REMOVE';\nexport const QUANTITY_SET = 'QUANTITY_SET';\n","import copy from 'fast-copy';\n\nimport { transformCategories, transformProducts } from '../utils';\nimport { IUseSetQuantityProps } from './actions';\nimport {\n  PRODUCTS_GET,\n  PRODUCTS_GET__SUCCESS,\n  PRODUCTS_GET__FAIL,\n  CATEGORIES_GET,\n  CATEGORIES_GET__SUCCESS,\n  CATEGORIES_GET__FAIL,\n  EXCHANGE_RATES_GET,\n  BASKET_PRODUCT_ADD,\n  BASKET_PRODUCT_REMOVE,\n  QUANTITY_SET,\n} from './types';\n\n\nlet typedCategories = [] as INames;\n\nconst reducer = (state: IState, action: IAction): IState => {\n  const { payload } = action;\n\n  switch (action.type) {\n    case CATEGORIES_GET:\n      return { ...state, fetched: false };\n\n    case CATEGORIES_GET__SUCCESS:\n      typedCategories = payload as INames;\n      const transformedCategories = transformCategories(typedCategories);\n\n      return {\n        ...state,\n        categories: transformedCategories,\n        fetched: true,\n      };\n\n    case CATEGORIES_GET__FAIL:\n      return { ...state, fetched: true };\n\n    case PRODUCTS_GET:\n      return { ...state, fetched: false };\n\n    case PRODUCTS_GET__SUCCESS:\n      const transformedProducts = transformProducts(payload, typedCategories);\n\n      return {\n        ...state,\n        products: transformedProducts,\n        fetched: true,\n      };\n\n    case PRODUCTS_GET__FAIL:\n      return { ...state, fetched: true };\n\n    case EXCHANGE_RATES_GET:\n      return { ...state, exchangeRates: payload };\n\n    case BASKET_PRODUCT_ADD:\n      const basketCopiedToAdd = copy(state.basket);\n      const indexToAdd = basketCopiedToAdd.findIndex(item => item.id === payload.id);\n      const isIndexFounded = indexToAdd !== -1;\n      let currentProduct;\n\n      if (!isIndexFounded && payload.available > 0) {\n        const totalAddedProducts = basketCopiedToAdd.push(payload);\n        currentProduct = basketCopiedToAdd[totalAddedProducts - 1];\n        currentProduct.quantity = 0;\n      }\n\n      if (isIndexFounded) {\n        currentProduct = basketCopiedToAdd[indexToAdd];\n      }\n\n      if (\n        currentProduct\n        && currentProduct.available > 0\n        && currentProduct.quantity < currentProduct.available\n      ) {\n        currentProduct.quantity += 1;\n      }\n\n      return { ...state, basket: basketCopiedToAdd };\n\n    case BASKET_PRODUCT_REMOVE:\n      const { id } = payload;\n      const basketCopiedToRemove = copy(state.basket);\n      const indexToRemove = basketCopiedToRemove.findIndex(item => item.id === id);\n      basketCopiedToRemove.splice(indexToRemove, 1);\n\n      return { ...state, basket: basketCopiedToRemove };\n\n    case QUANTITY_SET:\n      const { product, newQuantity } = payload as IUseSetQuantityProps;\n      const basketCopiedToQuantitySet = copy(state.basket);\n      const indexToQuantitySet = basketCopiedToQuantitySet.findIndex(item => item.id === product.id);\n      const productToQuantitySet = basketCopiedToQuantitySet[indexToQuantitySet];\n      if (\n        newQuantity > 0\n        && productToQuantitySet.available > 0\n        && newQuantity <= productToQuantitySet.available\n      ) {\n        productToQuantitySet.quantity = newQuantity;\n      }\n\n      return { ...state, basket: basketCopiedToQuantitySet };\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nexport default reducer;\n","export default function transformProducts(\n  products: IResponseWrap<{ Goods: IProductResponse[] }>,\n  categoriesPayload: INames\n): IProduct[] {\n    return products.Value.Goods.map((product: IProductResponse): IProduct => ({\n      id: product.T,\n      name: categoriesPayload[product.G] ? categoriesPayload[product.G].B[product.T].N : '-',\n      categoryId: product.G,\n      currency: product.C,\n      available: product.P,\n      quantity: 0,\n    }));\n}\n","export default function transformProducts(\n  categories: INames\n): ICategory[] {\n    return categories && Object.keys(categories).map((categoryId: string): ICategory => {\n      const categoryIdToNumber = Number(categoryId);\n\n      return {\n        id: categoryIdToNumber,\n        name: categories[categoryIdToNumber].G,\n        products: Object.keys(categories[categoryIdToNumber].B).map(category => parseInt(category, 10))\n      };\n    });\n}\n","import axios from 'axios';\n\nconst { PUBLIC_URL } = process.env;\n\n\nconst Api = {\n  getProducts: (): IRequestPromise<IResponseWrap<{ Goods: IProductResponse[] }>> =>\n    axios.get(`${PUBLIC_URL}/data.json`),\n\n  getCategories: (): IRequestPromise<INames> =>\n    axios.get(`${PUBLIC_URL}/names.json`),\n};\n\nexport default Api;\n","export const BASE_CURRENCY = 'USD';\nexport const MIN_RUB_EX_RATE = 20;\nexport const MAX_RUB_EX_RATE = 80;\n","import { useEffect, Dispatch } from 'react';\n\nimport Api from '../api';\nimport { fetchData, getRandomIntegerRange } from '../utils';\nimport * as types from '../hooks/types';\nimport { BASE_CURRENCY, MIN_RUB_EX_RATE, MAX_RUB_EX_RATE } from '../constants';\n\n\nconst FETCH_DELAY = 15 * 1000;\n\nexport default function useAPI (dispatch: Dispatch<any>, state: IState) {\n  const { categories, products, exchangeRates } = state;\n\n  // Get categories effect\n  useEffect(() => {\n    fetchData(\n      Api.getCategories,\n      dispatch,\n      [\n        types.CATEGORIES_GET,\n        types.CATEGORIES_GET__SUCCESS,\n        types.CATEGORIES_GET__FAIL\n      ]\n    );\n  }, [dispatch]);\n\n  // Get products effect, load after categories\n  useEffect(() => {\n    if (!categories.length) {\n      return;\n    }\n\n    fetchData(\n      Api.getProducts,\n      dispatch,\n      [\n        types.PRODUCTS_GET,\n        types.PRODUCTS_GET__SUCCESS,\n        types.PRODUCTS_GET__FAIL\n      ]\n    );\n  }, [categories, dispatch]);\n\n  // Get exchange rates effect, load after products\n  useEffect(() => {\n    if (!products.length) {\n      return;\n    }\n\n    const rateRub = getRandomIntegerRange(MIN_RUB_EX_RATE, MAX_RUB_EX_RATE);\n    const isIncreased = rateRub > exchangeRates.rates.RUB;\n\n    dispatch({\n      type: types.EXCHANGE_RATES_GET,\n      payload: {\n        rates: {\n          RUB: rateRub,\n          USD: 1,\n        },\n        base: BASE_CURRENCY,\n        isIncreased,\n      },\n    });\n  }, [products, dispatch]);\n\n  // Get products effect with delay in the background\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchData(\n        Api.getProducts,\n        dispatch,\n        [\n          types.PRODUCTS_GET,\n          types.PRODUCTS_GET__SUCCESS,\n          types.PRODUCTS_GET__FAIL\n        ],\n        true\n      );\n    }, FETCH_DELAY);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n}\n","export default function getRandomIntegerRange(min: number, max: number): number {\n  return Math.floor(Math.random() * (max + 1 - min) + min);\n}\n","import { BASE_CURRENCY, MIN_RUB_EX_RATE } from '../constants';\n\n\nconst initialState: IState = {\n  products: [],\n  categories: [],\n  basket: [],\n  exchangeRates: {\n    rates: {\n      RUB: MIN_RUB_EX_RATE,\n      USD: 1,\n    },\n    base: BASE_CURRENCY,\n    isIncreased: false,\n  },\n  fetched: false,\n};\n\nexport default initialState;\n","import React, { createContext } from 'react';\n\nimport initialState from './initialState';\n\n\nconst StateContext = createContext({\n  state: initialState,\n  dispatch: (() => ({})) as React.Dispatch<IAction>\n});\n\nexport default StateContext;\n","import { Dispatch, useContext } from 'react';\n\nimport StateContext from '../store/context';\nimport * as types from './types';\n\n\nexport interface IUseSetQuantityProps {\n  product: IProduct;\n  newQuantity: number;\n}\n\nexport function useDispatch(): Dispatch<IAction> {\n  const { dispatch } = useContext(StateContext);\n\n  return dispatch;\n}\n\nexport function useAddProductToBasket() {\n  const dispatch = useDispatch();\n\n  return function(product: IProduct): void {\n    dispatch({\n      type: types.BASKET_PRODUCT_ADD,\n      payload: product,\n    });\n  };\n}\n\nexport function useRemoveProductToBasket() {\n  const dispatch = useDispatch();\n\n  return function({ id }: Partial<IProduct>): void {\n    dispatch({\n      type: types.BASKET_PRODUCT_REMOVE,\n      payload: { id },\n    });\n  };\n}\n\nexport function useSetQuantity() {\n  const dispatch = useDispatch();\n\n  return function({ product, newQuantity }: IUseSetQuantityProps): void {\n    dispatch({\n      type: types.QUANTITY_SET,\n      payload: { product, newQuantity },\n    });\n  };\n}\n","import { useContext } from 'react';\n\nimport StateContext from '../store/context';\n\n\nexport function useStoreSelector<StateType, StatePartType>(\n  stateSelector: (store: StateType) => StatePartType\n): StatePartType {\n  const { state } = useContext(StateContext);\n\n  return stateSelector(state as any);\n}\n\nexport function useFetchData() {\n  return useStoreSelector<IState, boolean>(\n    state => state.fetched\n  );\n}\n\nexport function useCategoriesList() {\n  return useStoreSelector<IState, ICategory[]>(\n    state => state.categories\n  );\n}\n\nexport function useProductsList() {\n  return useStoreSelector<IState, IProduct[]>(\n    state => state.products\n  );\n}\n\nexport function useExchangeRatesList() {\n  return useStoreSelector<IState, IExchangeRates>(\n    state => (state.exchangeRates as IExchangeRates)\n  );\n}\n\nexport function useBasketProductsList() {\n  return useStoreSelector<IState, IProduct[]>(\n    state => state.basket\n  );\n}\n","import React, { ButtonHTMLAttributes } from 'react';\nimport cx from 'classnames';\n\nimport './style.css';\n\n\ntype Props = {\n  styleType?: 'primary' | 'danger';\n  isBlock?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst Button = (props: Props) => {\n  const {\n    disabled,\n    isBlock,\n    type = 'button',\n    styleType = 'primary',\n    className,\n    children,\n    ...restProps\n  } = props;\n  const baseClassName = cx(className, Button.displayName, {\n    '_disabled': disabled,\n    '_block': isBlock,\n    [`_${styleType}`]: styleType,\n  });\n\n  return (\n    <button\n      className={baseClassName}\n      disabled={disabled}\n      type={type}\n      {...restProps}\n    >\n      <span className={`${Button.displayName}__text`}>\n        {children}\n      </span>\n    </button>\n  );\n};\n\nButton.displayName = 'Button';\n\nexport default Button;\n","import React, { useState } from 'react';\nimport cx from 'classnames';\n\nimport './style.css';\n\n\ntype Props = {\n  title: string;\n  className?: string;\n  children?: React.ReactNode;\n  isCollapsible?: boolean;\n  isCollapsed?: boolean;\n};\n\nconst Card = (props: Props) => {\n  const {\n    className,\n    title,\n    children,\n    isCollapsible,\n    isCollapsed = false,\n    ...restProps } = props;\n  const [isStateCollapsed, setCollapsed] = useState(isCollapsed);\n  const baseClassName = cx(className, Card.displayName, {\n    _collapsible: isCollapsible,\n    _collapsed: isStateCollapsed,\n  });\n\n  return (\n    <div className={baseClassName} {...restProps}>\n      <div\n        className={`${Card.displayName}__title`}\n        onClick={() => setCollapsed(!isStateCollapsed)}\n      >\n        {title}\n      </div>\n      <div className={`${Card.displayName}__content`}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nCard.displayName = 'Card';\n\nexport default Card;\n","import React, {\n  useState,\n  useEffect,\n  InputHTMLAttributes,\n  ChangeEvent,\n  FocusEvent\n} from 'react';\nimport cx from 'classnames';\n\nimport './style.css';\n\n\ntype Props = InputHTMLAttributes<HTMLInputElement>;\n\nconst InputNumber = (props: Props) => {\n  const {\n    className,\n    value,\n    min = 1,\n    max = 1,\n    onChange,\n    onBlur,\n    ...restProps\n  } = props;\n  const baseClassName = cx(className, InputNumber.displayName);\n  const [valueState, setValue] = useState(value);\n\n  useEffect(() => {\n    if (valueState === value) {\n      return;\n    }\n\n    setValue(value);\n  }, [value]);\n\n  function handleChange(e: ChangeEvent<HTMLInputElement>) {\n    const newValue = e.target.value ? parseInt(e.target.value, 10) : '';\n    setValue(newValue);\n\n    if (newValue && newValue >= min && newValue <= max) {\n      onChange && onChange(e);\n    }\n  }\n\n  function handleBlur(e: FocusEvent<HTMLInputElement>) {\n    setValue(value);\n    onBlur && onBlur(e);\n  }\n\n  return (\n    <input\n      type=\"number\"\n      value={valueState}\n      min={min}\n      max={max}\n      className={baseClassName}\n      onChange={handleChange}\n      onBlur={handleBlur}\n      {...restProps}\n    />\n  );\n};\n\nInputNumber.displayName = 'InputNumber';\n\nexport default InputNumber;\n","import React from 'react';\nimport cx from 'classnames';\n\nimport spinnerSvg from '../../../assets/spinner.svg';\nimport './style.css';\n\n\ntype Props = {\n  className?: string;\n};\n\nconst Loader = (props: Props) => {\n  const { className, ...restProps } = props;\n  const baseClassName = cx(className, Loader.displayName);\n\n  return (\n    <div className={baseClassName} {...restProps}>\n      <img\n        className={`${Loader.displayName}__img`}\n        src={spinnerSvg}\n        alt=\"spinner\"\n      />\n    </div>\n  );\n};\n\nLoader.displayName = 'Loader';\n\nexport default Loader;\n","import React, { TableHTMLAttributes } from 'react';\nimport cx from 'classnames';\n\nimport './style.css';\n\n\ninterface IColumn {\n  title: string;\n  dataIndex: string;\n  key: string;\n}\n\ninterface IDataSource {\n  key: string | number;\n  [key: string]: any;\n}\n\ntype Props = {\n  columns: IColumn[];\n  dataSource: IDataSource[];\n  emptyText?: string;\n  total?: string;\n} & TableHTMLAttributes<HTMLTableElement>;\n\nconst Table = (props: Props) => {\n  const {\n    className,\n    columns,\n    dataSource,\n    emptyText = 'Нет данных',\n    total,\n    ...restProps\n  } = props;\n  const baseClassName = cx(className, Table.displayName);\n\n  return (\n    <div className={baseClassName}>\n      <table className={`${Table.displayName}__table`} {...restProps}>\n        <thead className={`${Table.displayName}__thead`}>\n          <tr className={`${Table.displayName}__tr`}>\n            {columns.map(column => (\n              <th key={column.key}\n                  className={`${Table.displayName}__th`}\n              >\n                {column.title}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody className={`${Table.displayName}__tbody`}>\n          {dataSource.length ? (\n            dataSource.map(data => (\n              <tr key={data.key}\n                  className={`${Table.displayName}__tr`}\n              >\n                {columns.map(column => (\n                  <td key={`${column.key}_${data.key}`}\n                      className={`${Table.displayName}__td`}\n                  >\n                    {column && data[column.key]}\n                  </td>\n                ))}\n              </tr>\n            ))\n          ) : null}\n        </tbody>\n\n        {total && dataSource.length ? (\n          <tfoot>\n            <tr>\n              {columns.map((column, index) => (\n                <td key={`tfoot_${column.key}`}\n                    className={`${Table.displayName}__td`}\n                >\n                  {columns.length - 1 === index && total}\n                </td>\n              ))}\n            </tr>\n          </tfoot>\n        ) : null}\n      </table>\n\n      {!dataSource.length ? (\n        <div className={`${Table.displayName}__table-placeholder`}>\n          <div className={`${Table.displayName}__table-empty`}>\n            {emptyText}\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nTable.displayName = 'Table';\n\nexport default Table;\n","import React from 'react';\n\nimport { IUseSetQuantityProps } from '../../../hooks/actions';\nimport { convertToNumber, formatCurrency } from '../../../utils';\nimport { InputNumberQuantity } from '../..';\nimport { Button, Table } from '../../ui';\n\n\ntype Props = {\n  exchangeRates: IExchangeRates;\n  basketProducts: IProduct[];\n  categories: ICategory[];\n  setQuantity: ({ product, newQuantity }: IUseSetQuantityProps) => void;\n  removeProductToBasket: ({ id }: Partial<IProduct>) => void;\n};\n\nconst BasketTable = (props: Props) => {\n  const { exchangeRates, basketProducts, categories, setQuantity, removeProductToBasket } = props;\n  const columns = [\n    {\n      title: 'Наименование товара и описание',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Количество',\n      dataIndex: 'quantity',\n      key: 'quantity',\n    },\n    {\n      title: 'Цена',\n      dataIndex: 'price',\n      key: 'price',\n    },\n    {\n      title: 'Действия',\n      dataIndex: 'actions',\n      key: 'actions',\n    },\n  ];\n  const dataSource = basketProducts.map(product => {\n    const { id, name, quantity, available, categoryId } = product;\n    const productCurrencyRub = convertToNumber(product.currency * exchangeRates.rates.RUB);\n    const appropriateCategory = categories.find(category => category.id === categoryId);\n    const appropriateCategoryName = appropriateCategory? `${appropriateCategory.name}. ` : '';\n\n    return {\n      key: id,\n      name: `${appropriateCategoryName}${name}`,\n      quantity: (\n        <InputNumberQuantity\n          value={quantity}\n          min={1}\n          max={available}\n          isIncreased={exchangeRates.isIncreased}\n          onChange={(e) =>\n            setQuantity({ product, newQuantity: parseInt(e.target.value, 10) })\n          }\n          addon=\"шт.\"\n          warningMessage={quantity === available ? 'Количество ограничено' : ''}\n        />\n      ),\n      price: `${formatCurrency(productCurrencyRub)} / шт.`,\n      actions: (\n        <Button styleType=\"danger\" onClick={() => removeProductToBasket({ id })}>\n          Удалить\n        </Button>\n      ),\n    };\n  });\n  const totalAmount = basketProducts.reduce(\n    (a, b) => a + convertToNumber(b.currency * b.quantity * exchangeRates.rates.RUB),\n    0\n  );\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={dataSource}\n      className={`${BasketTable.displayName}__table`}\n      emptyText=\"Нет товаров в корзине\"\n      total={`Общая стоимость: ${formatCurrency(totalAmount)}`}\n    />\n  );\n};\n\nBasketTable.displayName = 'BasketTable';\n\nexport default BasketTable;\n","import React from 'react';\n\nimport { convertToNumber, formatCurrency } from '../../../utils';\nimport { Button, Table } from '../../ui';\n\n\ntype Props = {\n  productsList: IProduct[];\n  exchangeRates: IExchangeRates;\n  basketProducts: IProduct[];\n  category: ICategory;\n  addProductToBasket: (product: IProduct) => void;\n  removeProductToBasket: ({ id }: Partial<IProduct>) => void;\n};\n\nconst CategoryTable = (props: Props) => {\n  const {\n    productsList,\n    exchangeRates,\n    basketProducts,\n    category,\n    addProductToBasket,\n    removeProductToBasket\n  } = props;\n\n  const dataSource = productsList\n    .filter((product) => category.products.includes(product.id))\n    .map(product => {\n      const { id, currency, available, name } = product;\n\n      const productItemInBasket = basketProducts.find(item => item.id === id);\n      const isDisabledDeleteButton = productItemInBasket\n        ? productItemInBasket.quantity > 0\n        : false\n      ;\n      const isDisabledAddButton = productItemInBasket\n        ? productItemInBasket.quantity === available\n        : false\n      ;\n      const productCurrencyRub = convertToNumber(currency * exchangeRates.rates.RUB);\n      const productAvailableCount = productItemInBasket\n        ? available - productItemInBasket.quantity\n        : available\n      ;\n\n      return {\n        key: id,\n        name: name,\n        available: productAvailableCount,\n        price: formatCurrency(productCurrencyRub),\n        actions: (\n          <>\n            <Button\n              onClick={() => addProductToBasket(product)}\n              disabled={isDisabledAddButton}\n            >\n              Добавить\n            </Button>\n            {isDisabledDeleteButton && (\n              <Button styleType=\"danger\" onClick={() => removeProductToBasket({ id })}>\n                Удалить\n              </Button>\n            )}\n          </>\n        )\n      };\n    })\n  ;\n  const columns = [\n    {\n      title: 'Название',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Доступно',\n      dataIndex: 'available',\n      key: 'available',\n    },\n    {\n      title: 'Цена',\n      dataIndex: 'price',\n      key: 'price',\n    },\n    {\n      title: 'Действия',\n      dataIndex: 'actions',\n      key: 'actions',\n    },\n  ];\n\n  return (\n    <Table\n      columns={columns}\n      dataSource={dataSource}\n      emptyText=\"Нет товаров в категории\"\n    />\n  );\n};\n\nCategoryTable.displayName = 'CategoryTable';\n\nexport default CategoryTable;\n","import React, { InputHTMLAttributes } from 'react';\nimport cx from 'classnames';\n\nimport { InputNumber } from '../../ui';\nimport './style.css';\n\n\ntype Props = {\n  addon?: React.ReactNode;\n  warningMessage?: string;\n  isIncreased?: boolean;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nconst InputNumberQuantity = (props: Props) => {\n  const {\n    className,\n    addon,\n    warningMessage,\n    isIncreased,\n    ...restProps\n  } = props;\n  const baseClassName = cx(className, InputNumberQuantity.displayName);\n  const inputClassName = cx(`${InputNumberQuantity.displayName}__input`, {\n    _increased: isIncreased,\n    _decreased: !isIncreased,\n  });\n\n  return (\n    <div className={baseClassName}>\n      <div className={`${InputNumberQuantity.displayName}__control`}>\n        <InputNumber\n          className={inputClassName}\n          {...restProps}\n        />\n        {' '}\n        {addon && (\n          <span className={`${InputNumberQuantity.displayName}__addon`}>\n            {addon}\n          </span>\n        )}\n      </div>\n\n      {warningMessage && (\n        <div className={`${InputNumberQuantity.displayName}__warning`}>\n          {warningMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n\nInputNumberQuantity.displayName = 'InputNumberQuantity';\n\nexport default InputNumberQuantity;\n","import React from 'react';\n\nimport * as actions from '../../hooks/actions';\nimport * as selectors from '../../hooks/selectors';\nimport { BasketTable } from '../../components';\nimport './style.css';\n\n\nconst Basket: React.FC = () => {\n  const exchangeRates = selectors.useExchangeRatesList();\n  const basketProducts = selectors.useBasketProductsList();\n  const categories = selectors.useCategoriesList();\n  const setQuantity = actions.useSetQuantity();\n  const removeProductToBasket = actions.useRemoveProductToBasket();\n\n  return (\n    <aside className={Basket.displayName}>\n      <h2 className={`${Basket.displayName}__head`}>\n        Корзина\n      </h2>\n      <BasketTable\n        exchangeRates={exchangeRates}\n        basketProducts={basketProducts}\n        categories={categories}\n        setQuantity={setQuantity}\n        removeProductToBasket={removeProductToBasket}\n      />\n    </aside>\n  );\n};\n\nBasket.displayName = 'Basket';\n\nexport default Basket;\n","import React from 'react';\n\nimport * as actions from '../../hooks/actions';\nimport * as selectors from '../../hooks/selectors';\nimport { Card, Loader } from '../../components/ui';\nimport { CategoryTable } from '../../components';\nimport './style.css';\n\n\nconst Categories: React.FC = () => {\n  const isFetched = selectors.useFetchData();\n  const productsList = selectors.useProductsList();\n  const categoriesList = selectors.useCategoriesList();\n  const exchangeRates = selectors.useExchangeRatesList();\n  const basketProducts = selectors.useBasketProductsList();\n  const addProductToBasket = actions.useAddProductToBasket();\n  const removeProductToBasket = actions.useRemoveProductToBasket();\n\n  function renderCategories() {\n    if (!isFetched) {\n      return <Loader />;\n    }\n\n    return categoriesList.map(category => (\n      <Card isCollapsible title={category.name} key={category.id}>\n        <CategoryTable\n          productsList={productsList}\n          exchangeRates={exchangeRates}\n          basketProducts={basketProducts}\n          category={category}\n          addProductToBasket={addProductToBasket}\n          removeProductToBasket={removeProductToBasket}\n        />\n      </Card>\n    ));\n  }\n\n  return (\n    <main className={Categories.displayName}>\n      <h2>Категории с товарами</h2>\n      {renderCategories()}\n    </main>\n  );\n};\n\nCategories.displayName = 'Categories';\n\nexport default Categories;\n","import React from 'react';\n\nimport { Basket, Categories } from '../../containers';\nimport './style.css';\n\n\nconst CatalogPage: React.FC = () => (\n  <div className={CatalogPage.displayName}>\n    <Basket />\n    <Categories />\n  </div>\n);\n\nCatalogPage.displayName = 'CatalogPage';\n\nexport default CatalogPage;\n","import React, { useReducer } from 'react';\n\nimport reducer from '../hooks/reducer';\nimport useAPI from '../hooks/api';\nimport initialState from '../store/initialState';\nimport StateContext from '../store/context';\nimport { CatalogPage } from '../pages';\nimport './style.css';\n\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useAPI(dispatch, state);\n\n  return (\n    <StateContext.Provider value={{ state, dispatch }}>\n      <div className={App.displayName}>\n        <CatalogPage />\n      </div>\n    </StateContext.Provider>\n  );\n};\n\nApp.displayName = 'App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: RequestInit) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config: RequestInit) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}